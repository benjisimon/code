#!/bin/env python3

##
## Inspired by:
##  https://stackoverflow.com/questions/2693820/extract-images-from-pdf-without-resampling-in-python
##  https://github.com/pymupdf/PyMuPDF/issues/338
##
## Useful for extracting images from a PDF
##
## Dependencies:
##  pip install --upgrade pymupdf
import os
import fitz
import getopt, sys


def usage():
    cmd = os.path.basename(sys.argv[0])
    print("Usage:", cmd, "-h")
    print("Usage:", cmd, "-a extract -i file.pdf -o dir")
    print("Usage:", cmd, "-a info -i file.pdf")
    print("Usage:", cmd, "-a remove -i file.pdf -o out.pdf")
    exit()

def image_extract(doc, output_dir):
    if (not output_dir):
        print("Missing: -o output_dir")
        exit();

    for page_num in range(len(doc)):
        for img in doc.get_page_images(page_num):
            xref = img[0]
            image = doc.extract_image(xref)
            pix = fitz.Pixmap(doc, xref)
            pix.save(os.path.join(output_dir, "%s_p%s-%s.png" % (os.path.basename(input_path)[:-4], i, xref)))

def image_info(doc):
    for page_num in range(len(doc)):
        for img in doc.get_page_images(page_num):
            page = doc[page_num];
            xref = img[0]
            name = img[7]
            print(page_num, name, xref, sep="|")

def image_remove(doc, output_file):
    if (not output_file):
        print("Missing -o output.pdf")
        exit()

    for page_num in range(len(doc)):
        for img in doc.get_page_images(page_num):
            page = doc[page_num];
            xref = img[0]
            name = img[7]
            # Want to call page.delete_image, but doing so trigges an error:
            # File "/Users/ben/Library/Python/3.9/lib/python/site-packages/fitz/utils.py", line 255, in replace_image
            # if not doc.is_image(xref):
            #   AttributeError: 'Document' object has no attribute 'is_image'
            # So do this manually
            pix = fitz.Pixmap(fitz.csGRAY, (0, 0, 1, 1), 1)
            new_xref = page.insert_image(page.rect, pixmap=pix)
            doc.xref_copy(new_xref, xref)
            last_contents_xref = page.get_contents()[-1]
            doc.update_stream(last_contents_xref, b" ")

    doc.save(output_file, deflate=True, garbage=3);


argumentList = sys.argv[1:]
options = "ho:i:a:"
input_path = False;
output = False;
action = False;

arguments, values =  getopt.getopt(argumentList, options)
for arg, val in arguments:
    if arg in ("-h"):
        usage()
    elif arg in ("-i"):
        input_path = val
    elif arg in ("-o"):
        output = val
    elif arg in ("-a"):
        action = val



if (not input_path):
    print("Missing: -i file.pdf")
    exit();
doc = fitz.Document(input_path)


if(action == "extract"):
    image_extract(doc, output)
elif(action == "info"):
    image_info(doc)
elif(action == "remove"):
    image_remove(doc, output)
else:
    usage();
