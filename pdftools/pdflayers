#!/bin/env python3

##
## MuPDF to the rescue
## See:
## https://pymupdf.readthedocs.io/en/latest/document.html#Document.get_layer
## https://pymupdf.readthedocs.io/en/latest/document.html#Document.set_layer
##
## You might think that get_layer and set_layer worked on an individual layer.
## They do not. They work on all the layers--aka Optional Content Groups (OCGS).
##
##
## You need to do:
##  python3 -m pip install --upgrade pymupdf
##
import fitz
import pprint
import getopt, sys
import os.path

def usage():
    cmd = os.path.basename(sys.argv[0])
    print("Usage:", cmd, "-l foo.pdf")
    print("Usage:", cmd, "[-e layer,..] [-d layer,...] [-E] [-D] -i input.pdf -o output.pdf")
    exit()

def list_layers(doc):
    ocgs = doc.get_ocgs();
    layers = doc.get_layer();
    on = layers['on'] if 'on' in layers else [];
    for ocg in ocgs:
        dispo = 'on' if ocg in on else 'off'
        print(":".join((dispo, str(ocg), ocgs[ocg]['name'])))

def layer_id_lookup(doc):
    def layer_id(text_or_id):
        if(text_or_id.isnumeric()):
            return int(text_or_id)

        ocgs = doc.get_ocgs();
        for ocg in doc.get_ocgs():
            if ocgs[ocg]['name'] == text_or_id:
                return ocg
        print("Layer:", text_or_id, "not found")
        exit();
    return layer_id;


def process_layers(action, doc, output_path, to_enable, to_disable, basestate):
    lookup = layer_id_lookup(doc);
    to_enable = list(map(lookup, to_enable))
    to_disable = list(map(lookup, to_disable))
    layers = doc.get_layer();
    current_on = layers['on'] if 'on' in layers else [];
    current_off = layers['off'] if 'off' in layers else [];

    on = []
    off = []
    ocgs = doc.get_ocgs();
    for ocg in doc.get_ocgs():
        if(ocg in to_enable):
            on.append(ocg);
        elif(ocg in to_disable):
            off.append(ocg);
        elif(basestate == "Unchanged" and ocg in current_on):
            on.append(ocg)
        elif(basestate == "Unchanged" and ocg in current_off):
            off.append(ocg)
        elif(basestate == "On"):
            on.append(ocg)
        else:
            off.append(ocg)

    doc.set_layer(config=-1, on=on, off=off, basestate=basestate)
    doc.save(output_path)


argumentList = sys.argv[1:]
options = "hl:e:d:i:o:DE"
action="none-set"
to_enable = []
to_disable = []
basestate = "Unchanged"
input_path = False
output_path = False

try:
    arguments, values =  getopt.getopt(argumentList, options)
    for arg, val in arguments:
        if arg in ("-h"):
            usage()
        if arg in ("-D"):
            basestate = "Off"
        if arg in ("-E"):
            basestate = "On"
        elif arg in ("-l"):
            action="list"
            input_path = val
        elif arg in ('-e'):
            action="enable"
            to_enable = list(val.split(','))
        elif arg in ('-d'):
            action="disable"
            to_disable = list(val.split(','))
        elif arg in ('-i'):
            input_path = val
        elif arg in ('-o'):
            output_path = val

except getopt.error as err:
    print (str(err))


if(input_path == False):
    print("No -i input set")
    exit()

doc = fitz.open(input_path);

if(action in ("list")):
  list_layers(doc)
elif(action in ("enable", "disable")):
    if(output_path == False):
        print("No -o output set")
        exit()
    process_layers(action, doc, output_path, to_enable, to_disable, basestate)
else:
    print("Unknown action:", action)
    exit()
