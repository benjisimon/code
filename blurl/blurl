#!/bin/bash

##
## Blogger + Curl = blurl - command line blogger tool.
## 
## Along with curl, this tools also depends on jq (https://stedolan.github.io/jq/)
##
## Learn more: http://www.blogbyben.com/2015/10/blurl-lightweight-command-line-blogger.html
##

KEY=AIzaSyAM2gqZQPvfFoGWcJnxuM7jKOPRw2dQb_U # Uh, get your own here: https://developers.google.com/blogger/docs/3.0/using#auth
VERBOSE=""
ACTION=info
BLOG_ID=$BLURL_BLOG_ID
AUTH_CTX=${BLURL_AUTH_CTX:-default}
API_URL="https://www.googleapis.com/blogger/v3/blogs"
AUTH_TOKEN=`blogger_auth -c $AUTH_CTX token`

function usage {
  cmd=`basename $0`
  echo "Usage: $cmd [-a info|get|list|new|update|patch|delete|search] [-i id] [-t title] [-l labels] [-b blogid] [-v] [-u url] [-q query] [-c]"
  echo ""
  echo "Examples: "
  echo "$cmd -a info -u http://benspracticearea.blogspot.com/"
  echo "$cmd -a list -b 1652895851793494171"
  echo "$cmd -a get -b 1652895851793494171 -i 340833261817193713"
  echo "( echo '<pre>' ; fortune ; echo '</pre>') | $cmd -a new  -t 'Quote of the Day' -l 'cli,blurl'"
  echo "( $cmd -a get -b 1652895851793494171 -i 340833261817193713 ; echo '<p>The End</p>') | \ "
  echo "  $cmd -a update -t 'A Story' -l 'cli,stories' -i 340833261817193713"
  echo "$cmd -a delete -i 7833575450850872368"
  echo "$cmd -a list |  "
  echo "  while read line; "
  echo "   do id=$(echo $line | sed 's/:.*//'); "
  echo "     title=$(echo $line | sed 's/^.*://'); "
  echo "     blurl -a patch -i $id -t \"[test] $title\" ; "
  echo "  done"
  echo ""
  echo "Blog ID: ${BLOG_ID:-unset}"
  exit 1
}

while getopts ":a:i:t:l:b:p:u:q:vc" opt ; do
  case $opt in
    a) ACTION=$OPTARG ;;
    i) ID=$OPTARG ;;
    t) TITLE=$OPTARG ;;
    l) LABELS=$OPTARG ;;
    b) BLOG_ID=$OPTARG ;;
    u) URL=$OPTARG ;;
    v) VERBOSE=yes ;;
    c) READ_CONTENT=yes ;;
    q) QUERY=$OPTARG ;;
    \?) usage ;;
  esac
done

function mk_tmp {
  prefix=$1
  if [ `uname` = "CYGWIN_NT-6.3" ] ; then
    cygpath -m /tmp/$prefix.$$
  else
    echo /tmp/$prefix.$$
  fi
}

function mk_labels {
  if [ -z "$LABELS" ] ; then
    echo ''
  else
    echo $LABELS | sed -e 's/^/"/' -e 's/, */","/g' -e 's/$/"/'
  fi
}

function curl_get {
  filter=$1 ; shift
  path=$1 ; shift
  if [ -n "$VERBOSE" ] ; then
    scrub=cat
  else
    scrub="jq -r '$filter'"
  fi
  next=''
  p=$(printf '%010d' 0)
  while true ; do
    p=$(printf '%010d' $(expr $p + 1))
    buffer=$(mk_tmp page.$p)
    if [ -n "$next" ] ; then
      curl -s -G -d key=$KEY  -d pageToken=$next $* $API_URL/$path > $buffer
    else
      curl -s -G -d key=$KEY $* $API_URL/$path > $buffer
    fi
    next=$(jq -r .nextPageToken $buffer)
    if [  "$next" == 'null' ] ; then
      break;
    fi
  done
  all=$(mk_tmp all)
  echo '{ "pages" : [' > $all
  if [ $p  -gt 0 ] ; then
    path=$(mk_tmp page.$(printf '%010d' 1))
    has_items=$(jq -r '.items | type' $path)
    if [ "$has_items" == 'array' ] ; then
      cat $path >> $all
    else 
      echo '{ "items" : [] }' >> $all
    fi
    rm $path
  fi
  if [ $p -gt 1 ] ; then
    for i in $(seq 2 $p) ; do
      echo "," >> $all
      path=$(mk_tmp page.$(printf '%010d' $i))
      has_items=$(jq -r '.items | type' $path)
      if [ "$has_items" == 'array' ] ; then
        cat $path >> $all
      else 
        echo '{ "items" : [] }' >> $all
      fi
      rm $path
    done
  fi
  echo ']}' >> $all
  cat $all | eval $scrub
  rm $all
}

function curl_do {
  method=$1 ; shift
  filter=$1 ; shift
  path=$1 ; shift
  payload=$1 ; shift
  if [ -n "$VERBOSE" ] ; then
    scrub=cat
  else
    scrub="jq -r '$filter'"
  fi

  if [ "$method" == "GET" ] ; then
    method_arg="-G"
  else
    method_arg="-X $method"
  fi

  if [ -n "$payload" ] ; then
    curl -s $method_arg -H "Authorization: Bearer $AUTH_TOKEN" -H "Content-Type: application/json" -d @$payload $API_URL/$path | eval $scrub
  else
    curl -s $method_arg -H "Authorization: Bearer $AUTH_TOKEN" $API_URL/$path $* | eval $scrub
  fi
}


case $ACTION in
  info)
    if [ -z "$URL" ] ; then
      usage
    else
      curl_do 'GET' '.id + ":" + .name' byurl '' --data-urlencode "url=$URL"  
    fi
    ;;
  search)
    if [ -z "$BLOG_ID" -o -z "$QUERY" ] ; then
      usage
    else
      curl_get '.pages[] | .items[]  | .id + ":" + .title' "$BLOG_ID/posts/search" -d blogId=$BLOG_ID --data-urlencode "q=$QUERY"
    fi
    ;;
  list)
    if [ -z "$BLOG_ID" ] ; then
      usage
    elif [ -n "$LABELS" ] ; then
      curl_get '.pages[] | .items[]  | .id + ":" + .title' "$BLOG_ID/posts" -d "fetchBodies=false"  \
               -d "maxResults=100" --data-urlencode "labels=$LABELS"
    else
      curl_get '.pages[] | .items[]  | .id + ":" + .title' "$BLOG_ID/posts" -d "fetchBodies=false"  \
               -d "maxResults=100"
    fi
    ;;
  get)
    if [ -z "$BLOG_ID" -o -z "$ID" ] ; then
      usage
    else
      curl_get '.content' "$BLOG_ID/posts/$ID"
    fi
    ;;
  patch)
    if [ -z "$BLOG_ID" ] ; then
      usage
    else
      jq_tmp=$(mk_tmp jq)
      body_tmp=$(mk_tmp body)
      echo '{ kind: "blogger#post" '            >> $jq_tmp
      echo "  , blog: { id: \"$BLOG_ID\" }  "   >> $jq_tmp
      echo "  , id: \"$ID\"                 "   >> $jq_tmp
      if [ -n "$LABELS" ] ; then
        labels=$(mk_labels)
        echo "  , labels: [ $labels ] "         >> $jq_tmp
      fi
      if [ -n "$TITLE" ] ; then
        echo "  , title: \"$TITLE\" "           >> $jq_tmp
      fi
      if [ -n "$READ_CONTENT" ] ; then
        echo "  , content: . "              >> $jq_tmp
        source=cat
      else
        source=echo
      fi
      echo '}'                                  >> $jq_tmp
      $source | jq -R -s -f $jq_tmp > $body_tmp
      curl_do 'PATCH' '.url' "$BLOG_ID/posts/$ID" $body_tmp
    fi
    ;;
  new|update)
    if [ -z "$BLOG_ID" -o -z "$TITLE" ] ; then
      usage
    else
      if [ $ACTION = "update" -a -z "$ID" ] ; then
        usage
      fi

      if [ $ACTION = "new" ] ; then
        maybe_id=''
      else
        maybe_id="id: \"$ID\","
      fi

      labels=`mk_labels`
      jq_tmp=`mk_tmp jq`
      body_tmp=`mk_tmp body`
      cat <<EOF > $jq_tmp
      { kind: "blogger#post",
        blog: { id: "$BLOG_ID" },
        $maybe_id
        labels: [ $labels ],
        title: "$TITLE" ,
        content: . }
EOF
      jq -R -s -f $jq_tmp > $body_tmp
      if [ $ACTION = "new" ] ; then
        method=POST
      else
        method=PUT
      fi
      curl_do $method '.url' "$BLOG_ID/posts/$ID" $body_tmp
      rm -f $jq_tmp $body_tmp
    fi
    ;;
  delete)
    if [ -z "$BLOG_ID" -o -z "$ID" ] ; then
      usage
    else
      curl_do 'DELETE' '.' "$BLOG_ID/posts/$ID"
    fi
    ;;
  *) usage ;;
esac
